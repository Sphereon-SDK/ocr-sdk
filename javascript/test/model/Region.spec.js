/**
 * OCR
 * <b>The OCR API 'ocr' performs Optical Character Resolution on input files.</b>    The flow is generally as follows:  1. First upload an image/file using the /ocr POST endpoint. You will get back a job response that contains a job with its associated settings.  2. Start the job from a PUT request to the /ocr/{jobid} endpoint, with the Job and Settings JSON as request body. The ocr extraction will now start.  3. Check the job status from the /ocr/{jobid} GET endpoint until the status has changed to DONE or ERROR. Messaging using a websocket will be available as an alternative in a future version  4. Retrieve the OCR result using the /ocr/{jobid}/result GET endpoint. This will return the OCR result only when the status is DONE. In other cases it will return the Job Response JSON (with http code 202 instead of 200)      <b>Interactive testing: </b>A web based test console is available in the <a href=\"https://store.sphereon.com\">Sphereon API Store</a>
 *
 * OpenAPI spec version: 1.0.0
 * Contact: dev@sphereon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ocr);
  }
}(this, function(expect, ocr) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ocr.Region();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Region', function() {
    it('should create an instance of Region', function() {
      // uncomment below and update the code to test Region
      //var instane = new ocr.Region();
      //expect(instance).to.be.a(ocr.Region);
    });

    it('should have the property bottomLeft (base name: "bottomLeft")', function() {
      // uncomment below and update the code to test the property bottomLeft
      //var instane = new ocr.Region();
      //expect(instance).to.be();
    });

    it('should have the property bottomRight (base name: "bottomRight")', function() {
      // uncomment below and update the code to test the property bottomRight
      //var instane = new ocr.Region();
      //expect(instance).to.be();
    });

    it('should have the property center (base name: "center")', function() {
      // uncomment below and update the code to test the property center
      //var instane = new ocr.Region();
      //expect(instance).to.be();
    });

    it('should have the property topLeft (base name: "topLeft")', function() {
      // uncomment below and update the code to test the property topLeft
      //var instane = new ocr.Region();
      //expect(instance).to.be();
    });

    it('should have the property topRight (base name: "topRight")', function() {
      // uncomment below and update the code to test the property topRight
      //var instane = new ocr.Region();
      //expect(instance).to.be();
    });

  });

}));
