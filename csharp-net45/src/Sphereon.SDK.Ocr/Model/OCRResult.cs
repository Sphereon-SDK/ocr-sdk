/* 
 * OCR
 *
 * <b>The OCR API 'ocr' performs Optical Character Resolution on input files.</b>    The flow is generally as follows:  1. First upload an image/file using the /ocr POST endpoint. You will get back a job response that contains a job with its associated settings.  2. Start the job from a PUT request to the /ocr/{jobid} endpoint, with the Job and Settings JSON as request body. The ocr extraction will now start.  3. Check the job status from the /ocr/{jobid} GET endpoint until the status has changed to DONE or ERROR. Messaging using a websocket will be available as an alternative in a future version  4. Retrieve the OCR result using the /ocr/{jobid}/result GET endpoint. This will return the OCR result only when the status is DONE. In other cases it will return the Job Response JSON (with http code 202 instead of 200)      <b>Interactive testing: </b>A web based test console is available in the <a href=\"https://store.sphereon.com\">Sphereon API Store</a>
 *
 * OpenAPI spec version: 1.0.0
 * Contact: dev@sphereon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Sphereon.SDK.Ocr.Model
{
    /// <summary>
    /// OCR Result
    /// </summary>
    [DataContract]
    public partial class OCRResult :  IEquatable<OCRResult>
    {

        /// <summary>
        /// Gets or Sets Engines
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EnginesEnum
        {
            
            /// <summary>
            /// Enum ADVANCED for "ADVANCED"
            /// </summary>
            [EnumMember(Value = "ADVANCED")]
            ADVANCED,
            
            /// <summary>
            /// Enum PREMIUM for "PREMIUM"
            /// </summary>
            [EnumMember(Value = "PREMIUM")]
            PREMIUM,
            
            /// <summary>
            /// Enum BASIC for "BASIC"
            /// </summary>
            [EnumMember(Value = "BASIC")]
            BASIC
        }

        /// <summary>
        /// OCR engines used
        /// </summary>
        /// <value>OCR engines used</value>
        [DataMember(Name="engines", EmitDefaultValue=false)]
        public List<EnginesEnum> Engines { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="OCRResult" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OCRResult() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OCRResult" /> class.
        /// </summary>
        /// <param name="Pages">pages (required).</param>
        /// <param name="Engines">OCR engines used (required).</param>
        /// <param name="Id">unique id (required).</param>
        public OCRResult(List<Page> Pages = null, List<EnginesEnum> Engines = null, string Id = null)
        {
            // to ensure "Pages" is required (not null)
            if (Pages == null)
            {
                throw new InvalidDataException("Pages is a required property for OCRResult and cannot be null");
            }
            else
            {
                this.Pages = Pages;
            }
            // to ensure "Engines" is required (not null)
            if (Engines == null)
            {
                throw new InvalidDataException("Engines is a required property for OCRResult and cannot be null");
            }
            else
            {
                this.Engines = Engines;
            }
            // to ensure "Id" is required (not null)
            if (Id == null)
            {
                throw new InvalidDataException("Id is a required property for OCRResult and cannot be null");
            }
            else
            {
                this.Id = Id;
            }
        }
        
        /// <summary>
        /// pages
        /// </summary>
        /// <value>pages</value>
        [DataMember(Name="pages", EmitDefaultValue=false)]
        public List<Page> Pages { get; set; }
        /// <summary>
        /// unique id
        /// </summary>
        /// <value>unique id</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OCRResult {\n");
            sb.Append("  Pages: ").Append(Pages).Append("\n");
            sb.Append("  Engines: ").Append(Engines).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as OCRResult);
        }

        /// <summary>
        /// Returns true if OCRResult instances are equal
        /// </summary>
        /// <param name="other">Instance of OCRResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OCRResult other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Pages == other.Pages ||
                    this.Pages != null &&
                    this.Pages.SequenceEqual(other.Pages)
                ) && 
                (
                    this.Engines == other.Engines ||
                    this.Engines != null &&
                    this.Engines.SequenceEqual(other.Engines)
                ) && 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Pages != null)
                    hash = hash * 59 + this.Pages.GetHashCode();
                if (this.Engines != null)
                    hash = hash * 59 + this.Engines.GetHashCode();
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                return hash;
            }
        }
    }

}
